package com.parse.starter;

import java.util.ArrayList;
import java.util.List;

import com.parse.FindCallback;
import com.parse.ParseGeoPoint;
import com.parse.ParseObject;
import com.parse.ParseQuery;
import com.parse.ParseException;

import android.app.Activity;
import android.app.ListActivity;
import android.app.ProgressDialog;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.provider.Contacts.People;
import android.provider.ContactsContract;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.ScrollView;
import android.widget.TextView;
import android.widget.Toast;
import android.support.v4.app.*;
import android.support.v4.content.CursorLoader;
import android.support.v4.content.Loader;
import android.support.v4.widget.SimpleCursorAdapter;

/*
public class ListEventsActivity extends ListActivity {

	private ArrayList<ParseObject> foodEvents;
	ProgressDialog loader;
	String [] toDisplay;
	ListView listView;
	private static boolean done;

	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		done = false;
		loader = ProgressDialog.show(this, "", "Loading food events...", true);
		new Thread(new Runnable() {
			public void run() {
				foodEvents = ParseApplication.getFoodItems();
				toDisplay = new String[foodEvents.size()];
				int g = 0;
				for (ParseObject x : foodEvents) {
					toDisplay[g] = x.getString("name");
					g++;
				}
				loader.dismiss();
				done = true;
			}}).start();

		while (!done) { }

		setListAdapter(new ArrayAdapter<String>(getApplicationContext(), R.layout.list_items,toDisplay));
		listView = getListView();
		listView.setTextFilterEnabled(true);
		listView.setBackgroundResource(R.drawable.bg);

		listView.setOnItemClickListener(new OnItemClickListener() {
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {

				Intent myIntent = new Intent(ListEventsActivity.this, ShowEventInfoActivity.class);
				myIntent.putExtra("com.parse.starter.foodEvent_location", foodEvents.get(position).getString("location"));
				myIntent.putExtra("com.parse.starter.foodEvent_description", foodEvents.get(position).getString("description"));
				myIntent.putExtra("com.parse.starter.foodEvent_start", foodEvents.get(position).getString("start_time"));
				myIntent.putExtra("com.parse.starter.foodEvent_end", foodEvents.get(position).getString("end_time"));
				ParseGeoPoint coords = (ParseGeoPoint) foodEvents.get(position).get("coordinates");
				double lat = coords.getLatitude();
				double lon = coords.getLongitude();
				myIntent.putExtra("com.parse.starter.foodEvent_lat", lat);
				myIntent.putExtra("com.parse.starter.foodEvent_lon", lon);
				ListEventsActivity.this.startActivity(myIntent);
			}
		});

	}

}
 */
public class ListEventsActivity extends ListActivity
implements LoaderManager.LoaderCallbacks<Cursor> {

	// This is the Adapter being used to display the list's data
	SimpleCursorAdapter mAdapter;

	// These are the Contacts rows that we will retrieve
	static final String[] PROJECTION = new String[] {ContactsContract.Data._ID,
		ContactsContract.Data.DISPLAY_NAME};

	// This is the select criteria
	static final String SELECTION = "((" + 
			ContactsContract.Data.DISPLAY_NAME + " NOTNULL) AND (" +
			ContactsContract.Data.DISPLAY_NAME + " != '' ))";

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		// Create a progress bar to display while the list loads
		ProgressBar progressBar = new ProgressBar(this);
		progressBar.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,
				LayoutParams.WRAP_CONTENT));
		progressBar.setIndeterminate(true);
		getListView().setEmptyView(progressBar);

		// Must add the progress bar to the root of the layout
		ViewGroup root = (ViewGroup) findViewById(android.R.id.content);
		root.addView(progressBar);

		// For the cursor adapter, specify which columns go into which views
		String[] fromColumns = {ContactsContract.Data.DISPLAY_NAME};
		int[] toViews = {android.R.id.text1}; // The TextView in simple_list_item_1

		// Create an empty adapter we will use to display the loaded data.
		// We pass null for the cursor, then update it in onLoadFinished()
		mAdapter = new SimpleCursorAdapter(this, 
				android.R.layout.simple_list_item_1, null,
				fromColumns, toViews, 0);
		setListAdapter(mAdapter);

		// Prepare the loader.  Either re-connect with an existing one,
		// or start a new one.
		getLoaderManager().initLoader(0, null, this);
	}

	// Called when a new Loader needs to be created
	public Loader<Cursor> onCreateLoader(int id, Bundle args) {
		// Now create and return a CursorLoader that will take care of
		// creating a Cursor for the data being displayed.
		return new CursorLoader(this, ContactsContract.Data.CONTENT_URI,
				PROJECTION, SELECTION, null, null);
	}

	// Called when a previously created loader has finished loading
	public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
		// Swap the new cursor in.  (The framework will take care of closing the
		// old cursor once we return.)
		mAdapter.swapCursor(data);
	}

	// Called when a previously created loader is reset, making the data unavailable
	public void onLoaderReset(Loader<Cursor> loader) {
		// This is called when the last Cursor provided to onLoadFinished()
		// above is about to be closed.  We need to make sure we are no
		// longer using it.
		mAdapter.swapCursor(null);
	}

	@Override 
	public void onListItemClick(ListView l, View v, int position, long id) {
		// Do something when a list item is clicked
	}
}
